@page "/"
@page "/coach/{Email}"
@page "/coach/{Email}/{Week}"
@page "/coach"

@using Blazorise.Extensions
@using Blazorise
@using Renci.SshNet
@using Semainier.Data

@inject EleveService eleveService
@inject DBService dbSshService
@inject NavigationManager nav

<h3>Devoirs des élèves</h3>
<div style="width: 75%; margin-left: 50px;">
    <div class="row">
        <div class="col">
            <label class="control-label">Recherche :</label>
            <input type="text" class="form-control"  @bind-value="_searchTextEleve" @bind-value:event="oninput"/>
        </div>
    </div>
    <div class="list-group mt-3">
        @foreach(var eleve in _elevesFilteredWithIdx.Select((eleve, i) => (eleve, i)))
        {
            <a @onclick="@(() => GetSemainierOfEleve(eleve.i))" href="/coach/@eleve.eleve.eleve.Email" class="list-group-item list-group-item-action flex-column align-items-start"
               style="-webkit-user-drag: none; user-select: none; -moz-user-select: none; -webkit-user-select: none; -ms-user-select: none;">
                <div class="d-flex w-100 justify-content-between">
                    <h7 class="mb-0">@eleve.eleve.eleve.Email</h7>
                    <span class="badge badge-primary badge-pill pt-2">@eleve.eleve.eleve.numSemainiers</span>
                </div>
            </a>
        }
    </div>
    <select @bind="selectedWeek" class="form-select mt-5 mb-3 w-25" aria-label="Default select example">
        <option selected>Toutes les semaines</option>
        @if (selectedEleve != -1)
        {
            @foreach (var item in Semainier.weeksNumber)
            {
                <option>@item</option>
            }
        }
    </select>
    <div class="table-responsive card mb-5">
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Date</th>
                    <th scope="col">Branche</th>
                    <th class="text-center" scope="col">Minutes</th>
                    <th class="text-center" scope="col">Remarques</th>
                </tr>
            </thead>
            @if (selectedEleve != -1)
            {
                @foreach (var item in listSemainierFiltered)
                {
                    <tbody>
                        <tr>
                            <th scope="row">@item.id</th>
                            <td>@item.date</td>
                            <td>@item.subject</td>
                            <td class="text-center">@item.minutes</td>
                            <td class="text-center">@item.more</td>
                        </tr>
                    </tbody>
                }
            }
        </table>
    </div>
</div>

@code {
    // Une liste de tous les élèves.
    public List<Eleve> allEleves = new List<Eleve>();

    // Paramètre passé au composant.
    [Parameter]
    public string email { get; set; } = "";
    //Paramètre passé au composant.
    [Parameter]
    public string week { get; set; } = "";

    // Une propriété de filtre de l'élève du composant.
    public string searchTextEleve { get; set; } = "";

    // Une propriété de filtre de l'élève du composant.
    public string _searchTextEleve { get { return searchTextEleve; } set { searchTextEleve = value; setActive(); } }

    // Une propriété de filtre des semainiers du composant.
    public string searchTextSemainier { get; set; } = "";

    // Une liste de tuples regroupant les élèves avec leurs position dans la liste.
    List<(Eleve eleve, int i)> elevesFilteredWthIdx = new List<(Eleve eleve, int i)>();

    //L'index de l'eleve courant dans la liste des eleves.
    private int idxEleve = 0;
    //L'index du semainier courant dans la liste des semainiers.
    private int idxSemainier = 0;
    // Une variable qui est utilisée pour stocker l'index de l'eleve sélectionné.
    private int selectedEleve = -1;
    // Une variable qui est utilisée pour stocker la valeur de la semaine sélectionnée.
    private string selectedWeekVar;
    // Une variable qui est utilisée pour stocker la semaine sélectionnée et de filtrer les semainiers à nouveaux.
    private string selectedWeek { get { return selectedWeekVar; } set { selectedWeekVar = value; FilterByWeek(); } }

    // Une liste de tous les noms des élèves.
    List<string> allNames = new List<string>();
    DBService dbService = new DBService();
    // Un tableau de chaînes nullable qui récupère certaines sorties de requêtes.
    string[]? output;
    // Crée une nouvelle instance du composant MainLayout.
    MainLayout mainLayout = new MainLayout();

    // Utilisé pour empêcher le code de s'exécuter deux fois.
    private bool once = true;

    // Utilisé pour injecter le JSRuntime dans le composant. (Permet d'exécuter des fonctions JS depuis le C#)
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    // Utilisé pour importer un fichier JS dans le composant.
    private IJSObjectReference jsModule;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!MainLayout.loggedIn)
            nav.NavigateTo("NavMenu");

        // Set Client SSH connection properties
        await dbService.SetSshClient("gv7t4.ftp.infomaniak.com", "gv7t4_admin", "Dragon_lion_8390");

        // Set the connection string for the DB connection
        await dbService.SetDbConnectionString("gv7t4.myd.infomaniak.com", "gv7t4_Matthias", "Dragon_lion_8390", "gv7t4_dbSemainiers");
        try
        {
            // SSH connection from client
            await dbService.Connect();

            // Executing SQL command from MySQL command using SSH tunneling
            string[] output = ((await dbService.ExecuteSqlCommandOnDB("SELECT email FROM Eleve;")).Skip(1).ToArray()).SkipLast(1).ToArray();

            // Get all eleves from stored in output after query execution
            foreach (var item in output)
            {
                if (!(eleveService.GetAllEleves().Result.Any(eleve => eleve.Email == item)))
                {
                    string name = (item.Split('@')[0]).Replace('.', ' ');
                    await eleveService.NewEleve(new Eleve()
                        {
                            Email = item.ToString(),
                            Name = name.ToString(),
                            numSemainiers = await eleveService.CountSemainiers(item)
                        });
                }
            }


            // Get all Eleves email
            allEleves = await eleveService.GetAllEleves();

            // SSH disconnection
            await dbService.Disconnect();
        }
        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Le port 22 est bloqué ! Veuillez le libérer pour pouvoir continuer !"); // Alert
            nav.NavigateTo("Error");
            throw;
        }

        foreach (Eleve eleve in elevesFiltered)
        {
            elevesFilteredWthIdx.Add((eleve, idxEleve));
            idxEleve++;
        }

        if (once)
        {
            once = false;
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/script.js");

            List<string> weekDays = (Enumerable.Range(1, 44 * 7).Select(i => new DateTime(DateTime.Now.Year, 08, 21).AddDays(i).ToString("dd.MM")).ToList());
            Semainier.weekDays = Enumerable.Range(0, 44).Select(i => weekDays.Skip(i * 7).Take(7).ToArray()).ToArray();

            Semainier.weeksNumber = Enumerable.Range(1, 44).Select(i => "Semaine " + i.ToString().PadLeft(2, '0') + " (" + Semainier.weekDays[i - 1][0] + "-" + Semainier.weekDays[i - 1][6] + ")").ToList();
        }

    }

    List<Eleve> elevesFiltered => allEleves.Where(e => e.Name.ToLower().Contains(_searchTextEleve.ToLower()) || e.Email.ToLower().Contains(_searchTextEleve.ToLower())).ToList();
    List<(Eleve eleve, int i)> _elevesFilteredWithIdx => elevesFilteredWthIdx.Where(e => e.eleve.Name.ToLower().Contains(_searchTextEleve.ToLower()) || e.eleve.Email.ToLower().Contains(_searchTextEleve.ToLower())).ToList();

    private async void GetSemainierOfEleve(int i)
    {
        email = _elevesFilteredWithIdx[i].eleve.Email;
        selectedEleve = i;

        if (email != "")
        {
            setActive();
            await dbService.Connect();
            elevesFiltered[i].Semainiers = await eleveService.GetSemainiers(email);
            await dbService.Disconnect();
            FilterByWeek();
        }
    }

    private async void setActive()
    {
        int id = _elevesFilteredWithIdx.FindIndex(e => e.eleve.Email == email);
        if (id > -1)
        {
            try
            {
                await dbService.Connect();
                await jsModule.InvokeVoidAsync("setActive", id);
                await dbService.Disconnect();
            }
            catch { }
        }
    }

    List<Semainier> listSemainierFiltered = new List<Semainier>();
    private async void FilterByWeek()
    {
        listSemainierFiltered = new List<Semainier>();
        await dbService.Connect();
        if (selectedWeekVar == "Toutes les semaines" || selectedWeekVar == null)
        {
            listSemainierFiltered = (await eleveService.GetSemainiers(elevesFiltered[selectedEleve].Email)).ToList();
        }
        else
        {
            List<string> dates = elevesFiltered[selectedEleve].Semainiers.Select(s => s.date).ToList();
            List<string> datesInWeek = Semainier.InWeek(dates, int.Parse(selectedWeek.Substring(8, 2)) - 1).ToList();
            idxSemainier = 0;

            foreach (var date in datesInWeek)
            {
                Semainier[] semTemp = await eleveService.GetSemainiers(elevesFiltered[selectedEleve].Email, date);
                foreach (var st in semTemp)
                {
                    idxSemainier++;
                    st.id = idxSemainier;
                    listSemainierFiltered.Add(st);
                }
            }
        }
        await dbService.Disconnect();
        StateHasChanged();
    }
}
