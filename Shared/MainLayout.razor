@using System.Net.Mail
@using System.Net
@inherits LayoutComponentBase

@inject Utilities.ILocalStorage LocalStorage
@inject NavigationManager nav
@inject IJSRuntime JSRuntime

<CascadingValue Value="this">

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">


			<div style="width:120px;text-align:right;">
				@if (loggedIn)
				{
					<a class="btn btn-sm btn-primary text-white" title="Account" href="account">
						<span class="oi oi-key"></span>
					</a>
					<button class="btn btn-sm btn-danger" title="Logout" @onclick="Logout">
						<span class="oi oi-account-logout"></span>
					</button>
				}
				else
				{
					<button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin">
						<span class="oi oi-account-login"></span>
					</button>
				}
			</div>


		</div>
		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

</CascadingValue>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Login Form</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">
				<div class="mb-3">
					<label for="loginEmail" class="form-label">Email</label>
					<input type="email" class="form-control" id="loginEmail" placeholder="name@example.com" autocomplete="off" required @bind-value="user" />
				</div>
				<div class="mb-3" hidden="@(first)">
					<label for="code" class="form-label">Code</label>
					<input type="number" class="form-control" id="loginNumber" required @bind-value="code" placeholder="123456789" />
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-success" @onclick="Login">@logintext</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
			</div>
		</div>
	</div>
</div>

@code {

	public static bool show, display, loggedIn;
	private string? user;
	private string? code;
	private bool first = true;
	string UQID;
	string logintext = "Send mail";

	public string? GetUserName()
	{
		return loggedIn ? user : null;
	}

	public async Task OpenLogin()
	{
		display = true;
		await Task.Delay(100);
		show = true;
	}

	public async Task Logout()
	{
		first = true;
		user = null;
		loggedIn = false;
		await LocalStorage.RemoveAsync("user");
		nav.NavigateTo("NavMenu");
	}

	private async Task Close()
	{
		show = false;
		await Task.Delay(500);
		display = false;
		logintext = "Send mail";
		first = true;
	}

	private async Task Login()
	{
		if (!string.IsNullOrEmpty(user))
		{
			if (first)
			{
				first = false;
				logintext = "Login";
				UQID = Math.Abs(Guid.NewGuid().GetHashCode()).ToString();
				if (!(await sendMail(user, UQID)))
				{
					first = true;
					logintext = "Send Mail";
					StateHasChanged();
				}
			}
			if (code == UQID)
			{
				await Close();
				loggedIn = true;
				await LocalStorage.SaveStringAsync("user", user);
				nav.NavigateTo("NavMenu");
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		user = await LocalStorage.GetStringAsync("user");
		loggedIn = !string.IsNullOrEmpty(user);
	}

	private async Task<bool> sendMail(string email, string token) {

		/* Création d'un nouvel objet MailAddress avec l'adresse e-mail de l'utilisateur. */
		MailAddress to = new MailAddress(email);
		MailAddress from = new MailAddress("support@semainiers.ch");
		MailMessage message = new MailMessage(from, to);
		message.Subject = "Semainier Authentification";
		message.Body = "Bonjour,\n" +
			"Voici votre code d'authentification : " + token + "\n" +
			"Si vous n'avez pas demandé ce code, ignorez ce mail.\n" +
			"Si vous avez des questions, n'hésitez pas à nous contacter à l'adresse suivante : support@semainiers.ch";

		/* Création d'un nouveau client SMTP avec le nom d'hôte et le port du serveur SMTP. */
		//SmtpClient client = new SmtpClient("mail.infomaniak.com", 25)

		SmtpClient client = new SmtpClient("smtp-mail.outlook.com", 587)
		{
			Credentials = new NetworkCredential("support@semainiers.ch", "#Dragon_lion_8390"),
			EnableSsl = true
		};


		/* Envoi d'un e-mail à l'utilisateur avec un jeton. */
		try
		{
			client.Send(message);
			return true;
		}
		catch (Exception e)
		{
			/* Affichage d'une boîte de message avec le message d'erreur. */
			await JSRuntime.InvokeVoidAsync("alert", "Impossible d'envoyer l'email :\n" + e.Message);
			return false;
		}
	}
}
